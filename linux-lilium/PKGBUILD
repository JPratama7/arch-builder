# Maintainer : JPratama7 <josepratama080@gmail.com>
# Contributor: Joan Figueras <ffigue at gmail dot com>
# Contributor: Torge Matthies <openglfreak at googlemail dot com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>

_microarchitecture=0
use_numa=y
use_tracers=y
_compiler=clang
_localmodcfg=n
_makenconfig=n

if [ "${_compiler}" = "clang" ]; then
  _compiler_flags="CC=clang HOSTCC=clang LD=ld.lld LLVM=1 LLVM_IAS=1"
fi

pkgbase=linux-lilium
_major=6.15
pkgver=${_major}.1
_branch=6.x
pkgrel=1
pkgdesc='Linux Kernel - Current Stable (CURRENT) with Custom Patches'
url="http://www.xanmod.org/"
arch=(x86_64)
_lucjan="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/${_major}/"
_cachy="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/${_major}/"
_tkg="https://raw.githubusercontent.com/Frogging-Family/linux-tkg/master/linux-tkg-patches/${_major}/"
_xanmod="https://gitlab.com/xanmod/linux-patches/-/raw/master/linux-${_major}.y-xanmod/"
_commit_ck=2870d6ac146aa658af60bb18a9c7503efe5992d4

_bore=5.9.6

license=(GPL2)
makedepends=(
  bc cpio kmod libelf perl tar xz
)
if [ "${_compiler}" = "clang" ]; then
  makedepends+=(clang llvm python)
fi
options=('!strip' '!buildflags')
_srcname="linux-${pkgver}-lilium${pkgrel}"

source=("https://cdn.kernel.org/pub/linux/kernel/v${_branch}/linux-${pkgver}.tar."{xz,sign}
        "choose-gcc-optimization.sh"
        "config"

        "https://www.kernel.org/pub/linux/kernel/projects/rt/$_major/patch-$_major-rt2.patch."{xz,sign}

        # "https://github.com/firelzrd/bore-scheduler/raw/refs/heads/main/patches/stable/linux-$_major-bore/0001-linux$pkgver-bore$_bore.patch"
        "${_lucjan}bore-smt-cores-patches/0001-bore-smt-cores-patches.patch"

        # Xanmod Feature
        "${_xanmod}binder/0001-binder-turn-into-module.patch"
        "${_xanmod}binder/0002-binder-give-binder_alloc-its-own-debug-mask-file.patch"
        "${_xanmod}binder/0003-wait-allow-to-use-__wake_up_pollfree-from-GPL-module.patch"
        "${_xanmod}binder/0004-file-export-file_close_fd-instead-of-close_fd_get_fi.patch"
        "${_xanmod}binder/0005-binder-turn-into-module-list_lru_add-list_lru_del.patch"
        "${_xanmod}binder/0006-binder-turn-into-module-lock_vma_under_rcu.patch"
        "${_xanmod}clearlinux/0001-sched-wait-Do-accept-in-LIFO-order-for-cache-efficie.patch"
        "${_xanmod}clearlinux/0002-firmware-Enable-stateless-firmware-loading.patch"
        "${_xanmod}clearlinux/0003-locking-rwsem-spin-faster.patch"
        "${_xanmod}clearlinux/0004-drivers-initialize-ata-before-graphics.patch"
        "${_xanmod}net/netfilter/0001-netfilter-Add-netfilter-nf_tables-fullcone-support.patch"
        "${_xanmod}net/netfilter/0002-netfilter-add-xt_FLOWOFFLOAD-target.patch"
        "${_xanmod}net/tcp/cloudflare/0001-tcp-Add-a-sysctl-to-skip-tcp-collapse-processing-whe.patch"
        "${_xanmod}pci_acso/0001-PCI-Enable-overrides-for-missing-ACS-capabilities.patch"
        "${_xanmod}userns/0001-sysctl-add-sysctl-to-disallow-unprivileged-CLONE_NEW.patch"
        "${_xanmod}zen/0001-ZEN-input-evdev-Use-call_rcu-when-detaching-client.patch"
        "${_xanmod}zen/0002-ZEN-dm-crypt-Disable-workqueues-for-crypto-ops.patch"

        "${_xanmod}xanmod/0001-XANMOD-x86-build-Add-more-CFLAGS-optimizations.patch"
        "${_xanmod}xanmod/0002-XANMOD-kbuild-Add-GCC-SMS-based-modulo-scheduling-fl.patch"
        "${_xanmod}xanmod/0007-XANMOD-block-mq-deadline-Increase-write-priority-to-.patch"
        "${_xanmod}xanmod/0008-XANMOD-block-mq-deadline-Disable-front_merges-by-def.patch"
        "${_xanmod}xanmod/0009-XANMOD-block-Set-rq_affinity-to-force-complete-I-O-r.patch"
        "${_xanmod}xanmod/0010-XANMOD-blk-wbt-Set-wbt_default_latency_nsec-to-2msec.patch"
        "${_xanmod}xanmod/0012-XANMOD-dcache-cache_pressure-50-decreases-the-rate-a.patch"
        "${_xanmod}xanmod/0013-XANMOD-mm-Raise-max_map_count-default-value.patch"
        "${_xanmod}xanmod/0014-XANMOD-mm-vmscan-Reduce-amount-of-swapping.patch"
        "${_xanmod}xanmod/0015-XANMOD-sched-autogroup-Add-kernel-parameter-and-conf.patch"
        "${_xanmod}xanmod/0016-XANMOD-cpufreq-tunes-ondemand-and-conservative-gover.patch"
        "${_xanmod}xanmod/0017-XANMOD-lib-kconfig.debug-disable-default-SYMBOLIC_ER.patch"

        "${_cachy}0004-bbr3.patch"
        "${_lucjan}openvpn-dco-patches-v4-all/0001-openvpn-dco-patches.patch"
        "${_lucjan}futex-patches/0001-futex-6.15-Add-entry-point-for-FUTEX_WAIT_MULTIPLE-o.patch"
        "${_lucjan}async-patches/0001-async-patches.patch"
        "${_lucjan}parallel-swapper-patches/0001-linux6.15.0-parallel-swapper-v0.2.patch"
        "${_lucjan}zram-patches/0001-linux6.15.y-zram-ir-1.2.patch"

        "${_lucjan}cachyos-fixes-patches-v4/0001-cachyos-fixes-patches.patch"
        "${_lucjan}cpu-cachyos-patches-all/0001-cpu-cachyos-patches.patch"
        "${_lucjan}cpuidle-patches/0001-cpuidle-Prefer-teo-over-menu-governor.patch"

        "${_lucjan}kbuild-cachyos-patches/0001-Cachy-Allow-O3.patch"
        "${_lucjan}v4l2loopback-patches/0001-media-v4l2-core-add-v4l2loopback-driver.patch"
        "${_lucjan}mm-zblock-patches/0001-mm-add-zblock-allocator.patch"
        "${_lucjan}le9uo-patches-v2/0001-mm-6.15-add-le9uo.patch"

        "${_lucjan}amd-pstate-patches-all/0001-amd-pstate-patches.patch"
        "${_lucjan}adios-iosched-default-on-patches/0001-iosched-6.15-introduce-ADIOS-I-O-scheduler.patch"
        "${_lucjan}block-patches-all/0001-block-patches.patch"

        "${_cachy}misc/0001-acpi-call.patch"
        "${_tkg}0012-misc-additions.patch"
        )
        #"patch-${pkgver}-xanmod${xanmod}.xz::https://sourceforge.net/projects/xanmod/files/releases/stable/${pkgver}-xanmod${xanmod}/patch-${pkgver}-xanmod${xanmod}.xz/download"

# Archlinux patches
_commit="ec9e9a4219fe221dec93fa16fddbe44a34933d8d"
_patches=()
for _patch in ${_patches[@]}; do
    #source+=("${_patch}::https://git.archlinux.org/svntogit/packages.git/plain/trunk/${_patch}?h=packages/linux&id=${_commit}")
    source+=("${_patch}::https://raw.githubusercontent.com/archlinux/svntogit-packages/${_commit}/trunk/${_patch}")
done

sha256sums=('44f1bb84fe512e7bafe0e6dc85d38ec1c6c8fcbe97ccb51d8c19930b799f0d64'
            'SKIP'
            '1ac18cad2578df4a70f9346f7c6fccbb62f042a0ee0594817fdef9f2704904ee'
            '35e90d951859c24b3fd0e88b70241d5556d721d963aaa231587d5eb3723aa377'
            'a20f23a441d0bcf5e72f376f612b9656d90e0cf5c83c930e3bc07df0aa664ef3'
            'SKIP'
            '50be48ccd39cbe036872a374d92200be14471eec8f8458f40bb69b67310ee78c'
            '68820016c14900d4a687b12b6350b51697d1b849dd4af3202d70994c50a5c28e'
            'b843f3f58237e04e3ee83cd91ea876335dbb4b0934521a8ae67d2ff1c5cb1b46'
            '86edea0777048c49d6fc6f60e94afaf825171e98512047191e1271654f0a9d83'
            '1a46a49a40dc2e21f80f47ec6d9d59a8534e64b03d47774abf81e4e02780c97c'
            '7275cf3aae79aaa553c275d87ea6cd5ee76d235dfe05ffbe44d3a4c8e72cc167'
            '8c3d3aa9940ca9dceb759a667a16ceae9b051ca92a3e7dec4974a2504729a084'
            'bf24341a575f2b6da61dd76df659ce34b7350ebe0bdc85260874320f07a8e1a8'
            'b13356ca36b826c089fcd65dad990e8fd16767168338228db3aa6ae784f88f12'
            '49dc9e462f60418e4f6de9510ca49899238cd073c999e6575d5ea337915577dd'
            '5994a9d2b10183d189c4450401ac16bfe9438d41161024b3d4be5ae8ca631ae7'
            '182c589f4d30bd943c052beb1eb85e0496fb8d9a52232d920c4ba4660d566157'
            'cd3e3aac8370bfdbbbd565e1e77204aff76f7265f2ec8cc7035fd59d5014d6b8'
            '5a6e083d0ab75c56ab4fec5365e7731c9001b16ac2e883a448368c950c0c6185'
            '97035ba2e14611c7df2d224c316e1f00b6b4fecec04713512f08d5a4c6829639'
            'e085120b1bfeb66693f666709a46e67a4a0ec75d6ec121e41c512737c618ad13'
            '27f27ae19b75839537f64ea73f3411856e859abfda255e66d3965000760e7df8'
            'cc64148b8e701b102fbd93886bea8cb847bbaef1a5bc68a92babbbdad0719eb7'
            '0562286053fdd083839fdaf946fbffad81dabd5b23546543fad52b66fe6474b3'
            'a257c05ff9bfc02e6bf04f20f8291017526c2f53f427fe48fb326c4f77dc5c27'
            'ed79311b63d7e9958d6f7220cc52051696591a12946d0433703b25d19d6664f5'
            'd3569cba1c77e6b8dd829142e3cd4e119bacb2aadb60d0258f8305ea6c9c0417'
            '1633dbd19c9956951512e88669bf893da8640ec0d7850018b070d1ce477e52db'
            'be87224028fbf615373b468037d06217e86aaace43fc472df366b2794f1a36b6'
            '0215b22e224dd6e1238534c437c7489009065562b00222f559de5a03fbd49a02'
            'cde81b2bdd7bb3fb501f87b27db089a761157c6f66c60de4de7c791a086faae4'
            '3b4af63d6d764b525a95e92fe62f519521adc7dd73e98d82f82443a80fe8f7a7'
            '49a10f0863553190e1d06dcc63fccea7adf78547cefa32cd4d86a78549255669'
            'ecc842514d4e8e58eb2dc46686134629771565cec511d3a532cf1a6ecc7baf3b'
            '4b608d7de68073b27c05dce2c90e22e15367754686b54701c1da3cab7a9a5fb8'
            'cc754e9cd4fc4e94991017544047788de896581d62d5e6833d261bcbc7b4d579'
            '22ae498ff7b7a9d2b5ead571defbf06115d7c03d36ceece3d43a0f55d4343be5'
            '234b6e57ff59429b2fb675fc05dd433fc891cd94a822784f837f8ba224c0fb72'
            'a987a6eb83b9d4b31ff3cecf915fe3795a990650e1b4678f54dc9195be198d66'
            'acb97a71772deaa2a772dfba5b276a7f2c8d3094b789bb89de2f9f385ecf5985'
            '460be6cbfcc8002994167111c801da61737d41d0df126416850a2fd9f2d1e0b9'
            'b34788a17525a231192013a94b328d4fcbc1a8caac8b1ed7dc9a564d3da44078'
            '475235e0c9a4cbf910b08503cb1e8e8811f342e7eb90fa60732c05fe745393c8'
            'b981ab63625782f4522a505c8eb7705aeeba9666de80d5ab5120ffd668664d40'
            '8ad361ce6c08c4d817960194638861b4c21894293b9e19cef38f19cb9e1a252c'
            '4c3c9e6ac8f6430f1ea9b8aa7d46207107475d9f66fb077d317dc944c420de16'
            'aec4e96d83705bba3fbd6bc839cc572fcea689f94365e9e877c4f7df063c131d'
            '61c38053c1db179cd37c88ad6c2d016c3b96a6f9d005c2eba052fea543075792'
            'fb4c8935a443ddcd5cfdaac542b243c58c9e3aeb033ac3565a3b400c64c0f666'
            '99549e27115b12b9cdd33062af8a5e9071e438e04a0c64551f49231a260dad32'
            '5d0e71ac2ffd9c20b77efceafb03bb1ac7ce1579bc2a4c40ec64ffd09d6a0144'
            'dcba9dc87fa263709c792ef869ca7b54a475f4f09380dadf284c2fadae1a2ca9'
            'e9785cf826aa347c2f6f365791775bffd931f49c8d0fb2273fb687e87fcaa8da')

export KBUILD_BUILD_HOST=${KBUILD_BUILD_HOST:-archlinux}
export KBUILD_BUILD_USER=${KBUILD_BUILD_USER:-makepkg}
export KBUILD_BUILD_TIMESTAMP=${KBUILD_BUILD_TIMESTAMP:-$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})}

apply_patch() {
    local patch_file=$(realpath "$1" 2>/dev/null)
    local output

    # Cek apakah file patch ada
    if [[ ! -f "$patch_file" ]]; then
        echo "Error: Patch File '$patch_file' not found."
        return 1
    fi

    echo "Applying $patch_file"
    local output=`patch -Np1 -F2 --input=$patch_file`
    local status=$?
    echo $status
    if [[ $output == *"FAILED"* ]]; then
      echo "Error: Failed to apply patch '$patch_file'."
      echo $output
      exit 1
    fi

    echo "Patch '$patch_file' applied."
    echo "Output:"
    echo $output
    return 0
  }

prepare() {
  mv linux-${pkgver} linux-${_major}
  cd linux-${_major}

  msg2 "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  # Archlinux patches
  msg2 "Applying Patches"
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    apply_patch "../$src"
    # OUT="$(patch -Np1 -F2 --input="../$src" -r -)" || echo "${OUT}" | grep "Skipping patch" -q | echo "${OUT}" || (echo "$OUT" && false);
  done

  # Applying configuration
  msg2 "Copy configuration"
  cp ../config .config

  # EROFS as module
  msg2 "Enable EROFS"
  scripts/config --module CONFIG_EROFS_FS

  # enable BORE Scheduler + RT
  msg2 "Enabling BORE + RT"
  scripts/config -e SCHED_BORE \
                 -e PREEMPT_RT

  msg2 "Setting custom config"
  scripts/config --set-val X86_64_VERSION 1
  scripts/config -e AMD_3D_VCACHE
  scripts/config -e MQ_IOSCHED_ADIOS

  # enable LTO_CLANG_THIN
  if [ "${_compiler}" = "clang" ]; then
    msg2 "Enabling LTO CLANG"
    scripts/config -e LTO \
                   -e LTO_CLANG \
                   -e ARCH_SUPPORTS_LTO_CLANG \
                   -e ARCH_SUPPORTS_LTO_CLANG_THIN \
                   -d LTO_NONE \
                   -e HAS_LTO_CLANG \
                   -d LTO_CLANG_FULL \
                   -e LTO_CLANG_THIN \
                   -e HAVE_GCC_PLUGINS;
  fi

  # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
  scripts/config -e CONFIG_PSI \
                 -e CONFIG_PSI_DEFAULT_DISABLED

  # CONFIG_STACK_VALIDATION gives better stack traces. Also is enabled in all official kernel packages by Archlinux team
  msg2 "Enable STACK VALIDATION"
  scripts/config -e CONFIG_STACK_VALIDATION

  msg2 "Enable THP"
  scripts/config -e TRANSPARENT_HUGEPAGE \
                 -d TRANSPARENT_HUGEPAGE_MADVISE \
                 -e TRANSPARENT_HUGEPAGE_ALWAYS

  # Enable IKCONFIG following Arch's philosophy
  msg2 "Enable IKCONFIG"
  scripts/config -e CONFIG_IKCONFIG \
                 -e CONFIG_IKCONFIG_PROC

  # User set. See at the top of this file
  if [ "$use_tracers" = "n" ]; then
    msg2 "Disabling FUNCTION_TRACER/GRAPH_TRACER only if we are not compiling with clang..."
    if [ "${_compiler}" = "gcc" ]; then
      scripts/config -d CONFIG_FUNCTION_TRACER \
                     -d CONFIG_STACK_TRACER
    fi
  fi

  if [ "$use_numa" = "n" ]; then
    msg2 "Disabling NUMA..."
    scripts/config -d NUMA \
                   -d AMD_NUMA \
                   -d X86_64_ACPI_NUMA \
                   -d NODES_SPAN_OTHER_NODES \
                   -d NUMA_EMU \
                   -d NEED_MULTIPLE_NODES \
                   -d USE_PERCPU_NUMA_NODE_ID \
                   -d ACPI_NUMA \
                   -d ARCH_SUPPORTS_NUMA_BALANCING \
                   -d NODES_SHIFT \
                   --undefine NODES_SHIFT \
                   -d NEED_MULTIPLE_NODES
  fi

  # Compress modules by default (following Arch's kernel)
  msg2 "Compress Modules"
  scripts/config -e CONFIG_MODULE_COMPRESS \
                 -e CONFIG_MODULE_COMPRESS_ALL \
                 -e CONFIG_MODULE_COMPRESS_ZSTD

  msg2 "AMD Private Color"
  scripts/config -e AMD_PRIVATE_COLOR

  msg2 "Change kernel tick rate to 300"
  scripts/config -d HZ_250 -e "HZ_300" --set-val HZ "300";

  msg2 "Set HOSTNAME"
  scripts/config --set-str CONFIG_DEFAULT_HOSTNAME "Lilium"

  ## Use Arch Wiki TOMOYO configuration: https://wiki.archlinux.org/title/TOMOYO_Linux#Installation_2
  msg2 "Replacing Debian TOMOYO configuration with upstream Arch Linux..."
  scripts/config --set-str CONFIG_SECURITY_TOMOYO_POLICY_LOADER      "/usr/bin/tomoyo-init"
  scripts/config --set-str CONFIG_SECURITY_TOMOYO_ACTIVATION_TRIGGER "/usr/lib/systemd/systemd"

  msg2 "Enable OVPN DCO V2"
  scripts/config -e CONFIG_OVPN_DCO_V2

  msg2 "AMD PSTATE"
  scripts/config  -e CONFIG_X86_AMD_PSTATE \
                  -e CONFIG_X86_AMD_PSTATE_DYNAMIC_EPP

  msg2 "Enable v4l2loopback support"
  scripts/config -m CONFIG_V4L2_LOOPBACK

  msg2 "Enabling FULLCONENAT..."
  scripts/config -m IP_NF_TARGET_FULLCONENAT \
                 -m NETFILTER_XT_TARGET_FULLCONENAT

  msg2 "Enabling KBUILD_CFLAGS -O3..."
  scripts/config -d CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE \
                 -e CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3

  msg2 "Enabling multigenerational LRU..."
  scripts/config -e CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG \
                 -e CONFIG_LRU_GEN \
                 -e CONFIG_LRU_GEN_ENABLED \
                 -d CONFIG_LRU_GEN_STATS


  msg2 "Enabling all ZRAM backend support..."
  scripts/config -e CONFIG_ZRAM_BACKEND_LZ4 \
                 -e CONFIG_ZRAM_BACKEND_LZ4HC \
                 -e CONFIG_ZRAM_BACKEND_DEFLATE \
                 -e CONFIG_ZRAM_BACKEND_LZO \
                 -e CONFIG_ZRAM_BACKEND_ZSTD

  msg2 "Disable compression except ZSTD"
  scripts/config -d ZRAM_DEF_COMP_LZORLE \
                 -d ZRAM_DEF_COMP_LZO \
                 -d ZRAM_DEF_COMP_LZ4 \
                 -d ZRAM_DEF_COMP_LZ4HC \
                 -d ZRAM_DEF_COMP_DEFLATE \
                 -d ZRAM_DEF_COMP_842

  msg2 "Change zram zswap compression to ZSTD"
  scripts/config -e CONFIG_ZRAM_BACKEND_ZSTD \
                 -e CONFIG_ZRAM_DEF_COMP_ZSTD \
                 --set-str CONFIG_ZRAM_DEF_COMP zstd \
                 -d CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4 \
                 -e CONFIG_ZSWAP_COMPRESSOR_DEFAULT_ZSTD \
                 --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT zstd

  msg2 "Enable Anbox"
  scripts/config -e CONFIG_ASHMEM \
                 -e CONFIG_ANDROID \
                 -e CONFIG_ANDROID_BINDER_IPC \
                 -e CONFIG_ANDROID_BINDERFS \
                 -e CONFIG_ANDROID_BINDER_DEVICES="binder,hwbinder,vndbinder"

  msg2 "Enable NTFS + NTFS3"
  scripts/config -m CONFIG_NTFS_FS \
                 -m CONFIG_NTFS3_FS \
                 -e CONFIG_NTFS3_64BIT_CLUSTER \
                 -e CONFIG_NTFS3_LZX_XPRESS \
                 -e CONFIG_NTFS3_FS_POSIX_ACL

  # Let's user choose microarchitecture optimization in GCC
  # Use default microarchitecture only if we have not choosen another microarchitecture
  if [ "$_microarchitecture" -ne "0" ]; then
    "$srcdir"/choose-gcc-optimization.sh $_microarchitecture
  fi

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ "$_localmodcfg" = "y" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make ${_compiler_flags} LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit 1
    fi
  fi

  msg2 "make ${_compiler_flags} olddefconfig"
  make ${_compiler_flags} olddefconfig
  make ${_compiler_flags} prepare
  # diff -u ../confg .config || :

  msg2 "Finishing..."
  make -s kernelrelease > version
  msg2 "Prepared %s version %s" "$pkgbase" "$version"

  if [ "$_makenconfig" = "y" ]; then
    make ${_compiler_flags} nconfig
  fi

  # save configuration for later reuse
  cat .config > "${SRCDEST}/config.last"
}

build() {
  cd linux-${_major}
  make ${_compiler_flags} all
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The Linux kernel and modules with Xanmod patches"
  depends=(
    coreutils
    kmod
    initramfs
  )
  optdepends=(
    'crda: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
  )
  provides=(
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
    KSMBD-MODULE
    NTFS3-MODULE
    V4L2LOOPBACK-MODULE
  )
  replaces=(
    virtualbox-guest-modules-arch
    wireguard-arch
  )

  cd linux-${_major}
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 make "${BUILD_FLAGS[@]}" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}


_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd linux-${_major}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts
  ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}


pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
