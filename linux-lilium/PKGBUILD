# Maintainer : JPratama7 <josepratama080@gmail.com>
# Contributor: Joan Figueras <ffigue at gmail dot com>
# Contributor: Torge Matthies <openglfreak at googlemail dot com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>

_microarchitecture=0
use_numa=y
use_tracers=y
_compiler=clang
_localmodcfg=n
_makenconfig=n

if [ "${_compiler}" = "clang" ]; then
  _compiler_flags="CC=clang HOSTCC=clang LD=ld.lld LLVM=1 LLVM_IAS=1"
fi

pkgbase=linux-lilium
_major=6.16
pkgver=${_major}.4
_branch=6.x
pkgrel=1
pkgdesc='Linux Kernel - Current Stable (CURRENT) with Custom Patches'
url="http://www.xanmod.org/"
arch=(x86_64)
_lucjan="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/${_major}/"
_cachy="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/${_major}/"
_tkg="https://raw.githubusercontent.com/Frogging-Family/linux-tkg/master/linux-tkg-patches/${_major}/"
_xanmod="https://gitlab.com/xanmod/linux-patches/-/raw/master/linux-${_major}.y-xanmod/"
_commit_ck=2870d6ac146aa658af60bb18a9c7503efe5992d4

_bore=5.9.6

license=(GPL2)
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  rust
  rust-bindgen
  rust-src
  tar
  xz
  kmod

  # htmldocs
  graphviz
  imagemagick
  python-sphinx
  python-yaml
  texlive-latexextra
)
if [ "${_compiler}" = "clang" ]; then
  makedepends+=(clang llvm python)
fi
options=('!strip' '!buildflags')
_srcname="linux-${pkgver}-lilium${pkgrel}"

source=("https://cdn.kernel.org/pub/linux/kernel/v${_branch}/linux-${pkgver}.tar."{xz,sign}
        "choose-gcc-optimization.sh"
        "config"

        "https://www.kernel.org/pub/linux/kernel/projects/rt/$_major/patch-$_major-rt3.patch."{xz,sign}

        # "https://github.com/firelzrd/bore-scheduler/raw/refs/heads/main/patches/stable/linux-$_major-bore/0001-linux$pkgver-bore$_bore.patch"
        "${_lucjan}bore-smt-cores-patches-v3/0001-bore-smt-cores-patches.patch"

        # Xanmod Feature
        "${_xanmod}binder/0001-binder-turn-into-module.patch"
        "${_xanmod}binder/0002-binder-give-binder_alloc-its-own-debug-mask-file.patch"
        "${_xanmod}binder/0003-wait-allow-to-use-__wake_up_pollfree-from-GPL-module.patch"
        "${_xanmod}binder/0004-file-export-file_close_fd-instead-of-close_fd_get_fi.patch"
        "${_xanmod}binder/0005-binder-turn-into-module-list_lru_add-list_lru_del.patch"
        "${_xanmod}binder/0006-binder-turn-into-module-lock_vma_under_rcu.patch"
        "${_xanmod}clearlinux/0001-sched-wait-Do-accept-in-LIFO-order-for-cache-efficie.patch"
        "${_xanmod}clearlinux/0002-firmware-Enable-stateless-firmware-loading.patch"
        "${_xanmod}clearlinux/0003-locking-rwsem-spin-faster.patch"
        "${_xanmod}clearlinux/0004-drivers-initialize-ata-before-graphics.patch"
        "${_xanmod}net/netfilter/0001-netfilter-Add-netfilter-nf_tables-fullcone-support.patch"
        "${_xanmod}net/netfilter/0001-netfilter-add-xt_FLOWOFFLOAD-target.patch"
        "${_xanmod}net/tcp/cloudflare/0001-tcp-Add-a-sysctl-to-skip-tcp-collapse-processing-whe.patch"
        "${_xanmod}pci_acso/0001-PCI-Enable-overrides-for-missing-ACS-capabilities.patch"
        "${_xanmod}zen/0001-ZEN-input-evdev-Use-call_rcu-when-detaching-client.patch"
        "${_xanmod}zen/0002-ZEN-dm-crypt-Disable-workqueues-for-crypto-ops.patch"

        "${_xanmod}xanmod/0001-XANMOD-x86-build-Add-more-CFLAGS-optimizations.patch"
        "${_xanmod}xanmod/0008-XANMOD-block-mq-deadline-Increase-write-priority-to-.patch"
        "${_xanmod}xanmod/0009-XANMOD-block-mq-deadline-Disable-front_merges-by-def.patch"
        "${_xanmod}xanmod/0010-XANMOD-block-Set-rq_affinity-to-force-complete-I-O-r.patch"
        "${_xanmod}xanmod/0011-XANMOD-blk-wbt-Set-wbt_default_latency_nsec-to-2msec.patch"
        "${_xanmod}xanmod/0013-XANMOD-vfs-Decrease-rate-at-which-vfs-caches-are-rec.patch"
        "${_xanmod}xanmod/0014-XANMOD-mm-Raise-max_map_count-default-value.patch"
        "${_xanmod}xanmod/0015-XANMOD-mm-vmscan-Reduce-amount-of-swapping.patch"
        "${_xanmod}xanmod/0016-XANMOD-sched-autogroup-Add-kernel-parameter-and-conf.patch"
        "${_xanmod}xanmod/0017-XANMOD-cpufreq-tunes-ondemand-and-conservative-gover.patch"
        "${_xanmod}xanmod/0018-XANMOD-lib-kconfig.debug-disable-default-SYMBOLIC_ER.patch"
        "${_xanmod}xanmod/0002-XANMOD-x86-build-Add-LLVM-polyhedral-loop-optimizer-.patch"
        "${_xanmod}xanmod/0003-XANMOD-kbuild-Add-SMS-based-software-pipelining-flag.patch"
        "${_xanmod}xanmod/0004-XANMOD-kbuild-deb-pkg-Create-dbg-when-make-DEB_DEBUG.patch"
        "${_xanmod}xanmod/0007-XANMOD-sched-Add-yield_type-sysctl-to-reduce-or-disa.patch"

        "${_cachy}0002-bbr3.patch"
        "${_lucjan}futex-patches/0001-futex-6.16-Add-entry-point-for-FUTEX_WAIT_MULTIPLE-o.patch"
        "${_lucjan}drm-patches-all/0001-drm-patches.patch"
        "${_lucjan}async-patches/0001-async-patches.patch"
        "${_lucjan}s5-patches/0001-s5-patches.patch"
        "${_lucjan}asus-patches/0001-asus-patches.patch"
        "${_lucjan}le9uo-default-on-patches/0001-mm-6.16-add-le9uo.patch"
        "${_lucjan}t2-patches-v2/0001-t2-patches.patch"

        "${_lucjan}cachyos-fixes-patches-v5/0001-cachyos-fixes-patches.patch"
        "${_lucjan}cpu-patches/0001-cpu-6.16-merge-graysky-s-patchset.patch"
        "${_lucjan}cpuidle-patches/0001-cpuidle-Prefer-teo-over-menu-governor.patch"

        "${_lucjan}kbuild-cachyos-patches/0001-Cachy-Allow-O3.patch"
        "${_lucjan}v4l2loopback-patches/0001-media-v4l2-core-add-v4l2loopback-driver.patch"
        "${_lucjan}mm-zblock-patches/0001-mm-add-zblock-allocator.patch"

        "${_lucjan}adios-iosched-default-on-patches-v6/0001-iosched-6.16-introduce-ADIOS-I-O-scheduler.patch"
        "${_lucjan}block-patches-all/0001-block-patches.patch"

        "${_cachy}misc/0001-acpi-call.patch"
        "${_cachy}misc/0001-clang-polly.patch"
        "${_tkg}0012-misc-additions.patch"
        )
        #"patch-${pkgver}-xanmod${xanmod}.xz::https://sourceforge.net/projects/xanmod/files/releases/stable/${pkgver}-xanmod${xanmod}/patch-${pkgver}-xanmod${xanmod}.xz/download"

# Archlinux patches
_commit="ec9e9a4219fe221dec93fa16fddbe44a34933d8d"
_patches=()
for _patch in ${_patches[@]}; do
    #source+=("${_patch}::https://git.archlinux.org/svntogit/packages.git/plain/trunk/${_patch}?h=packages/linux&id=${_commit}")
    source+=("${_patch}::https://raw.githubusercontent.com/archlinux/svntogit-packages/${_commit}/trunk/${_patch}")
done

sha256sums=('d6a5e3c71a10b533a756251387cc8bf48bbd5c76d842ba5e957d8b1c316ab622'
            'SKIP'
            '3e9a99c37a182ec826bfc3017bb108257368e4404ab50cf6f2310da7373f8788'
            'e91dc950eaab7ab6663287117170d02b7328f6322f0c36786b30a51d991b9b23'
            '0cfdfae2a419826f84e1d30fead9a4e8475c10753faa75c63a0fd7e6e1c7541a'
            'SKIP'
            'c6e48143e5df25dbcf3a3fc4e99e6cb46c06c80ea106021441188223da039efb'
            'c3c055b8c2edc294c419037a0be951190e95c646c119833f456c38913042d5f0'
            '720586d19669023b9e130cfbda6ab3bdfda61979d2df26e6a2ad535d68d7160d'
            'e9acba73f0b2bce3eb6a1b985527d54bb5d9676443c138a264a750c1babc1cae'
            'de6e6ffbdeddca761c0faf8e61a1d00b7e6f99dec00ccf0212bbd3db702eaa30'
            'b950f96822a0fe8b27bf0e6338bb33887467392fb2ac836b709409b5172a4100'
            '0a2a45ac50388d6ad0175993e85f96038fc6a2c544a239f532672022acacdbc0'
            'bf24341a575f2b6da61dd76df659ce34b7350ebe0bdc85260874320f07a8e1a8'
            'b13356ca36b826c089fcd65dad990e8fd16767168338228db3aa6ae784f88f12'
            '49dc9e462f60418e4f6de9510ca49899238cd073c999e6575d5ea337915577dd'
            '5994a9d2b10183d189c4450401ac16bfe9438d41161024b3d4be5ae8ca631ae7'
            '5c08152918996a8dddd8f3ab3da64828bfe88ed0fb6899dfb8e515fcff7db64e'
            '77c2cfee16608e2b4d017f7864e4c2952db87d8fb502fd2029c9c5b639268395'
            'f80ff644a8dc30bda21d1b273099a532cbffd8ef0e47762e15bc233f33ca3ee1'
            '3472792130ebd1f474282b02f61b6ced2a68e42f62bc7afb7ce8e4bbe88504d5'
            '27f27ae19b75839537f64ea73f3411856e859abfda255e66d3965000760e7df8'
            'cc64148b8e701b102fbd93886bea8cb847bbaef1a5bc68a92babbbdad0719eb7'
            'cc07710471b243ec3150f89e2f6d22fb4eceffb17b678c156530c81e51bc4365'
            'd19577d9a03b6dca12dead5a9ea93dd548395c2fc5ea39d24848065adc8e379a'
            '6ca66dfbcda0cd3d359fe25cce077a7072bd4d733d100db22b610605e35998c5'
            '0c59a09003237e72e7e63192eeda6e444294af498f2c9e022984b83e0674f2af'
            '71fb0483f07b1972c33c0a55f878db03f1538173fb682a54ae05f73fb3d767d4'
            '141972404189428652d7964cef3e7cfb7cf72871c6eb801a5c9bcab684bc663a'
            '5234a5b7f0278554ff930fe999b722dd101baaca5d4e7e64ef504fca345af15e'
            'e24f3c1ab20a6260eb67e23fd22cc9a1fbc93a7777025167bc735a5c50236ac4'
            '315a3cff4a9ceb999100f81352aebfafde879bf3fff510d475e4899a63429558'
            'c9ee7c39efc3e07eb7a998671a36aed31ade8894836bac04013c4b7a0628d986'
            'b214f175f174267beed0a459251c0051ce9309c07771a177d4b00c336393b066'
            '6d78089aec27104ac92e254552a90c1110f45817b4c03d311d9ab58d8e47f127'
            '35cc796e751ebc778f51b791ffabd2c6c72642c206eda7fe413479eef8e522d8'
            '51a573a2691d8ac794b4b288de19cb800e431ccad4eda38ce29d13b890c72aa2'
            'ee04ade8152e9f19d9714289c545e619083bf2bd34ab68384f656de29c71c11f'
            '54a50fc1160cb0a368ed8101d59377a2940373f61043fdd5cc09a28d49fe4bfa'
            '5498087398dc57e7182657e4f5237d7c5527692fceddd3c394a7dbd1a5b70ab2'
            '64ffbc9a4bc3cdf00f747993dc4fe67568753b64c2e102cf0cdf3b533d4a5aa9'
            'd88715f6042977c594bdc4029183151601620da8b3d7ed4dd534f1b981e12ff4'
            '078a50d951397750fd0b03b062bee65b979aa1444d41d5ff0ec61d9bc993af53'
            'c0f4597795c224c618cfb95347bb85dc5106fd9921237af72d852143bc33576b'
            'c05e8f9f2bfbc16228dab7d3f409447df836e9c55210f355e5ddc49376097023'
            'fea769e7c44b1cdef009116a56b00de50af92ed8e428b42b8e6dcd97aaa39c16'
            '9fc44d38e7a9d55e481bddc778f40f62f187c498f6dee331967dc7461b9743b6'
            '668e98f2452228c5ac181b50ac4e136d2d0357d09f5db34c8600f683e24796fb'
            'df6186fca383cd04bca1a31f861f88bc390eb798e985b9250a55390a9301b562'
            '69c1d4b6adad7ed8cc9ba9d7581b499b10c55dc38ae7c57b5296f4da9a36bca2'
            '9c966ac4c900ab63574f45cb56aa4265979db8f7fc657dde075e0404b1847e0d'
            '925a8b998f14fef87ee638dc37a51f22e467b623c8a9157e9c19deb55a2e2bf2'
            '00c010bf5507d83114e2323ea20ba47d5387fd66b6a648705eb03ddce20923ab'
            '37c20de5a3beb475e5c9075e66b811b37f83273a09a2753836365e560887b262'
            'dcba9dc87fa263709c792ef869ca7b54a475f4f09380dadf284c2fadae1a2ca9'
            '71e5926efc30833a6fd756b9358529ac695fa688ae71cd74e31dd274ae1ecf05'
            '0bb07c0d5dc373f2043dc5915e4ac7ffa29bcbc5925f7d73d1b8bea6796eab16')

export KBUILD_BUILD_HOST=${KBUILD_BUILD_HOST:-archlinux}
export KBUILD_BUILD_USER=${KBUILD_BUILD_USER:-makepkg}
export KBUILD_BUILD_TIMESTAMP=${KBUILD_BUILD_TIMESTAMP:-$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})}

apply_patch() {
    local patch_file=$(realpath "$1" 2>/dev/null)
    local output

    # Cek apakah file patch ada
    if [[ ! -f "$patch_file" ]]; then
        echo "Error: Patch File '$patch_file' not found."
        return 1
    fi

    echo "Applying $patch_file"
    local output=`patch -Np1 -F2 --input=$patch_file`
    local status=$?
    echo $status
    if [[ $output == *"FAILED"* ]]; then
      echo "Error: Failed to apply patch '$patch_file'."
      echo $output
      exit 1
    fi

    echo "Patch '$patch_file' applied."
    echo "Output:"
    echo $output
    return 0
  }

prepare() {
  mv linux-${pkgver} linux-${_major}
  cd linux-${_major}

  msg2 "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  # Archlinux patches
  msg2 "Applying Patches"
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    apply_patch "../$src"
    # OUT="$(patch -Np1 -F2 --input="../$src" -r -)" || echo "${OUT}" | grep "Skipping patch" -q | echo "${OUT}" || (echo "$OUT" && false);
  done

  # Applying configuration
  msg2 "Copy configuration"
  cp ../config .config

  # EROFS as module
  msg2 "Enable EROFS"
  scripts/config --module CONFIG_EROFS_FS

  # enable BORE Scheduler + RT
  msg2 "Enabling BORE + RT"
  scripts/config -e SCHED_BORE \
                 -e PREEMPT_RT

  msg2 "Setting custom config"
  scripts/config --set-val X86_64_VERSION 1
  scripts/config -e AMD_3D_VCACHE
  scripts/config -e MQ_IOSCHED_ADIOS

  # enable LTO_CLANG_THIN
  if [ "${_compiler}" = "clang" ]; then
    msg2 "Enabling LTO CLANG"
    scripts/config -e LTO \
                   -e LTO_CLANG \
                   -e ARCH_SUPPORTS_LTO_CLANG \
                   -e ARCH_SUPPORTS_LTO_CLANG_THIN \
                   -d LTO_NONE \
                   -e HAS_LTO_CLANG \
                   -d LTO_CLANG_FULL \
                   -e LTO_CLANG_THIN \
                   -e HAVE_GCC_PLUGINS;
  fi

  # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
  scripts/config -e CONFIG_PSI \
                 -e CONFIG_PSI_DEFAULT_DISABLED

  # CONFIG_STACK_VALIDATION gives better stack traces. Also is enabled in all official kernel packages by Archlinux team
  msg2 "Enable STACK VALIDATION"
  scripts/config -e CONFIG_STACK_VALIDATION

  msg2 "Enable THP"
  scripts/config -e TRANSPARENT_HUGEPAGE \
                 -d TRANSPARENT_HUGEPAGE_MADVISE \
                 -e TRANSPARENT_HUGEPAGE_ALWAYS

  # Enable IKCONFIG following Arch's philosophy
  msg2 "Enable IKCONFIG"
  scripts/config -e CONFIG_IKCONFIG \
                 -e CONFIG_IKCONFIG_PROC

  # User set. See at the top of this file
  if [ "$use_tracers" = "n" ]; then
    msg2 "Disabling FUNCTION_TRACER/GRAPH_TRACER only if we are not compiling with clang..."
    if [ "${_compiler}" = "gcc" ]; then
      scripts/config -d CONFIG_FUNCTION_TRACER \
                     -d CONFIG_STACK_TRACER
    fi
  fi

  if [ "$use_numa" = "n" ]; then
    msg2 "Disabling NUMA..."
    scripts/config -d NUMA \
                   -d AMD_NUMA \
                   -d X86_64_ACPI_NUMA \
                   -d NODES_SPAN_OTHER_NODES \
                   -d NUMA_EMU \
                   -d NEED_MULTIPLE_NODES \
                   -d USE_PERCPU_NUMA_NODE_ID \
                   -d ACPI_NUMA \
                   -d ARCH_SUPPORTS_NUMA_BALANCING \
                   -d NODES_SHIFT \
                   --undefine NODES_SHIFT \
                   -d NEED_MULTIPLE_NODES
  fi

  # Compress modules by default (following Arch's kernel)
  msg2 "Compress Modules"
  scripts/config -e CONFIG_MODULE_COMPRESS \
                 -e CONFIG_MODULE_COMPRESS_ALL \
                 -e CONFIG_MODULE_COMPRESS_ZSTD

  msg2 "AMD Private Color"
  scripts/config -e AMD_PRIVATE_COLOR

  msg2 "Change kernel tick rate to 300"
  scripts/config -d HZ_250 -e "HZ_300" --set-val HZ "300";

  msg2 "Set HOSTNAME"
  scripts/config --set-str CONFIG_DEFAULT_HOSTNAME "Lilium"

  ## Use Arch Wiki TOMOYO configuration: https://wiki.archlinux.org/title/TOMOYO_Linux#Installation_2
  msg2 "Replacing Debian TOMOYO configuration with upstream Arch Linux..."
  scripts/config --set-str CONFIG_SECURITY_TOMOYO_POLICY_LOADER      "/usr/bin/tomoyo-init"
  scripts/config --set-str CONFIG_SECURITY_TOMOYO_ACTIVATION_TRIGGER "/usr/lib/systemd/systemd"

  msg2 "Enable OVPN DCO V2"
  scripts/config -e CONFIG_OVPN_DCO_V2

  msg2 "AMD PSTATE"
  scripts/config  -e CONFIG_X86_AMD_PSTATE \
                  -e CONFIG_X86_AMD_PSTATE_DYNAMIC_EPP

  msg2 "Enable v4l2loopback support"
  scripts/config -m CONFIG_V4L2_LOOPBACK

  msg2 "Enabling FULLCONENAT..."
  scripts/config -m IP_NF_TARGET_FULLCONENAT \
                 -m NETFILTER_XT_TARGET_FULLCONENAT

  msg2 "Enabling KBUILD_CFLAGS -O3..."
  scripts/config -d CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE \
                 -e CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3

  msg2 "Enabling multigenerational LRU..."
  scripts/config -e CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG \
                 -e CONFIG_LRU_GEN \
                 -e CONFIG_LRU_GEN_ENABLED \
                 -d CONFIG_LRU_GEN_STATS


  msg2 "Enabling all ZRAM backend support..."
  scripts/config -e CONFIG_ZRAM_BACKEND_LZ4 \
                 -e CONFIG_ZRAM_BACKEND_LZ4HC \
                 -e CONFIG_ZRAM_BACKEND_DEFLATE \
                 -e CONFIG_ZRAM_BACKEND_LZO \
                 -e CONFIG_ZRAM_BACKEND_ZSTD

  msg2 "Disable compression except ZSTD"
  scripts/config -d ZRAM_DEF_COMP_LZORLE \
                 -d ZRAM_DEF_COMP_LZO \
                 -d ZRAM_DEF_COMP_LZ4 \
                 -d ZRAM_DEF_COMP_LZ4HC \
                 -d ZRAM_DEF_COMP_DEFLATE \
                 -d ZRAM_DEF_COMP_842

  msg2 "Change zram zswap compression to ZSTD"
  scripts/config -e CONFIG_ZRAM_BACKEND_ZSTD \
                 -e CONFIG_ZRAM_DEF_COMP_ZSTD \
                 --set-str CONFIG_ZRAM_DEF_COMP zstd \
                 -d CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4 \
                 -e CONFIG_ZSWAP_COMPRESSOR_DEFAULT_ZSTD \
                 --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT zstd

  msg2 "Enable Anbox"
  scripts/config -e CONFIG_ASHMEM \
                 -e CONFIG_ANDROID \
                 -e CONFIG_ANDROID_BINDER_IPC \
                 -e CONFIG_ANDROID_BINDERFS \
                 -e CONFIG_ANDROID_BINDER_DEVICES="binder,hwbinder,vndbinder"

  msg2 "Enable NTFS + NTFS3"
  scripts/config -m CONFIG_NTFS_FS \
                 -m CONFIG_NTFS3_FS \
                 -e CONFIG_NTFS3_64BIT_CLUSTER \
                 -e CONFIG_NTFS3_LZX_XPRESS \
                 -e CONFIG_NTFS3_FS_POSIX_ACL

  # Let's user choose microarchitecture optimization in GCC
  # Use default microarchitecture only if we have not choosen another microarchitecture
  if [ "$_microarchitecture" -ne "0" ]; then
    "$srcdir"/choose-gcc-optimization.sh $_microarchitecture
  fi

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ "$_localmodcfg" = "y" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make ${_compiler_flags} LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit 1
    fi
  fi

  msg2 "make ${_compiler_flags} olddefconfig"
  make ${_compiler_flags} olddefconfig
  make ${_compiler_flags} prepare
  # diff -u ../confg .config || :

  msg2 "Finishing..."
  make -s kernelrelease > version
  msg2 "Prepared %s version %s" "$pkgbase" "$version"

  if [ "$_makenconfig" = "y" ]; then
    make ${_compiler_flags} nconfig
  fi

  # save configuration for later reuse
  cat .config > "${SRCDEST}/config.last"
}

build() {
  cd linux-${_major}
  make ${_compiler_flags} all
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The Linux kernel and modules with Xanmod patches"
  depends=(
    coreutils
    kmod
    initramfs
  )
  optdepends=(
    'crda: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
  )
  provides=(
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
    KSMBD-MODULE
    NTFS3-MODULE
    V4L2LOOPBACK-MODULE
  )
  replaces=(
    virtualbox-guest-modules-arch
    wireguard-arch
  )

  cd linux-${_major}
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 make "${BUILD_FLAGS[@]}" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}


_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd linux-${_major}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts
  ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  if [ -d "$builddir/rust" ] && [ "$(ls -A "$builddir/rust")" ]; then
    echo "Installing Rust files..."
    install -Dt "$builddir/rust" -m644 rust/*.rmeta
    install -Dt "$builddir/rust" rust/*.so
  fi

  echo "Installing unstripped VDSO..."
  make "${BUILD_FLAGS[@]}" INSTALL_MOD_PATH="$pkgdir/usr" vdso_install \
    link=  # Suppress build-id symlinks

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}


pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
