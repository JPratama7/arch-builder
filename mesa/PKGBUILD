pkgname=mesa
pkgdesc="Mesa open-source implementation of the OpenGL specification"
pkgver=25.0.0
_pkgver=${pkgver//_/-}
pkgrel=2
epoch=1
arch=('x86_64')
makedepends=(
  'python-mako' 'xorgproto' 'cmake' 'pkgconf' 'directx-headers'
  'libxml2' 'libvdpau' 'libva' 'elfutils' 'libxrandr'
  'wayland-protocols' 'meson' 'ninja' 'glslang' 'python-ply'
  'python-setuptools' 'python-packaging' 'python-yaml' 'clang'
  'llvm' 'libpng' 'cbindgen' 'libclc' 'spirv-tools'
)

makedepends+=('rust' 'rust-bindgen') # rusticl dependencies

DLAGENTS=(
  'http::/usr/bin/wget -q --show-progress -t 3 --waitretry=3 -O %o %u'
  'https::/usr/bin/wget -q --show-progress -t 3 --waitretry=3 -O %o %u'
)

depends=(
  'libdrm' 'libxxf86vm' 'libxdamage' 'libxshmfence' 'libelf' 'llvm-libs'
  'systemd' 'systemd-libs' 'xcb-util-keysyms' 'zlib' 'libx11'
  'libglvnd' 'wayland' 'lm_sensors' 'vulkan-icd-loader' 'zstd' 'expat'
  'spirv-llvm-translator' 'python'  'libxcb'
  'libxext' 'libxfixes'
)

optdepends=('opengl-man-pages: for the OpenGL API man pages')
provides=(
  'mesa' "mesa=${pkgver}" 'opencl-mesa' 'vulkan-intel' 'vulkan-radeon' 'vulkan-mesa-layer' 'libva-mesa-driver' 
  'mesa-vdpau' 'vulkan-swrast' 'vulkan-driver' 'opengl-driver' 'opencl-driver' 'mesa-libgl'
  )
conflicts=('mesa' 'opencl-mesa' 'vulkan-intel' 'vulkan-radeon' 'vulkan-mesa-layer' 'libva-mesa-driver' 'mesa-vdpau' 'vulkan-swrast')
url="https://www.mesa3d.org"
license=('custom')
source=(
  "https://archive.mesa3d.org/mesa-${_pkgver}.tar.xz"{,.sig}

)

sha256sums=('0079beac0a33f45e7e0aec59e6913eafbc4268a3f1e2e330017440494f91b13c'
  'SKIP'
  '39278fbbf5fb4f646ce651690877f89d1c5811a3d4acb27700c1cb3cdb78fd3b'
  '3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b'
  '5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae'
  '23e78b90f2fcf45d3e842032ce32e3f2d1545ba6636271dcbf24fa306d87be7a'

  )

validpgpkeys=(
  '57551DE15B968F6341C248F68D8E31AFC32428A6' # Keith Packard <keithp@keithp.com>
  '71C4B75620BC75708B4BDB254C95FAAB3EB073EC' # Dylan Baker <dylan@pnwbakers.com>
)


# Rust crates for NVK, used as Meson subprojects
declare -A _crates=(
   equivalent      1.0.1
   hashbrown       0.14.1
   indexmap        2.2.6
   once_cell       1.8.0
   paste           1.0.14
   pest            2.7.11
   pest_derive     2.7.11
   pest_generator  2.7.11
   pest_meta       2.7.11
   proc-macro2     1.0.86
   quote           1.0.33
   roxmltree       0.20.0
   syn             2.0.68
   ucd-trie        0.1.6
   unicode-ident   1.0.12
)


for _crate in "${!_crates[@]}"; do
  source+=($_crate-${_crates[$_crate]}.tar.gz::https://crates.io/api/v1/crates/$_crate/${_crates[$_crate]}/download)
done


GALLIUM_DRIVERS="r300,r600,radeonsi,nouveau,virgl,svga,llvmpipe,softpipe,iris,crocus,i915,zink,d3d12"
VULKAN_DRIVERS="amd,intel,intel_hasvk,nouveau,swrast,virtio"
VULKAN_LAYERS="device-select,intel-nullhw,overlay,screenshot"

_extra_lto_flag=""

_patch() {

  echo -e "\E[1;33m Apply patch: ${1}\E[0m"
  patch -Np1 -i "${srcdir:?}/${1}"

}

prepare() {

  cd mesa-$_pkgver

  if clang --version 2>/dev/null | grep -iq "clang\s*version\s*[0-9]" && ld.lld --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
    _extra_lto_flag='-D b_lto_mode=thin'
  fi

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    _patch $src
  done

  echo "$pkgver-arch$epoch.$pkgrel" > VERSION

}

build() {

  python -c 'from packaging.version import Version; import mako; assert Version(mako.__version__) >= Version("0.8.0")'

  # Inject subproject packages
  export MESON_PACKAGE_CACHE_DIR="$srcdir"

  local meson_options=(
        --prefix /usr
        --libexecdir lib
        --sbindir bin
        --auto-features enabled
        --wrap-mode nodownload
        -D debug=false
        -D optimization=2
        -D b_ndebug=true
        -D b_lto=true ${_extra_lto_flag}
        -D b_pie=true
        -D b_lundef=false
        -D sysconfdir=/etc
        -D platforms=x11,wayland
        -D gallium-drivers="${GALLIUM_DRIVERS}"
        -D vulkan-drivers="${VULKAN_DRIVERS}"
        -D vulkan-layers="${VULKAN_LAYERS}"

        -D egl=enabled
        
        -D gallium-extra-hud=true
        -D gallium-nine=true
        -D gallium-opencl=icd
        -D gallium-va=enabled
        -D gallium-vdpau=enabled
        -D gallium-xa=enabled
        -D gallium-rusticl=true
        -D gallium-d3d12-video=enabled
        -D gallium-d3d12-graphics=enabled
        
        -D rust_std=2021
        -D gbm=enabled
        -D gles1=disabled
        -D gles2=enabled
        -D glvnd=enabled
        -D glx=dri
        
        -D libunwind=disabled
        -D llvm=enabled
        -D lmsensors=enabled
        -D osmesa=true
        -D shared-glapi=enabled
        -D microsoft-clc=disabled
        -D opengl=true
        -D zstd=auto
        -D valgrind=disabled
        -D android-libbacktrace=disabled
        -D intel-clc=enabled
        -D intel-rt=enabled
        -D video-codecs=all
        -D amdgpu-virtio=true
        -D legacy-x11='dri2'
        
        -D c_args="$CFLAGS -Wno-format-truncation"
        -D c_link_args="$LDFLAGS -Wl,--undefined-version"
        -D cpp_args="$CXXFLAGS -Wno-format-truncation"
        -D cpp_link_args="$LDFLAGS -Wl,--undefined-version"
        --strip
  )

  arch-meson mesa-$pkgver build-clang "${meson_options[@]}"

  meson compile -C build-clang

}

package() {

  DESTDIR="${pkgdir:?}" meson install -C build-clang

  ln -s /usr/lib/libGLX_mesa.so.0 "${pkgdir:?}/usr/lib/libGLX_indirect.so.0"

  install -Dm644 mesa-$pkgver/docs/license.rst -t "$pkgdir/usr/share/licenses/$pkgname"
}